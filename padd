#!/usr/bin/env python3
# coding=utf-8
"""[P]urge [A]rtist [D]atabase [D]uplicates
Remove duplicates from the Simplenote artist database.
"""

import sys
import os
import copy
import logging

import artist_db

logging.basicConfig(
    stream=sys.stdout, level=logging.DEBUG,
    format="%(levelname)s: %(message)s")


def sort_uniq(lst):
    """Return `lst`, with duplicates removed."""
    seen = []
    # Sets are fast.
    brackets_seen = set()
    for item in lst:
        logging.debug(f"item = {repr(item)}")
        if "(" in item and ")" in item:
            bracket = item[item.find("(")+1 : item.find(")")]
            brackets_seen.add(bracket)
            logging.debug(f"bracket = {repr(bracket)}")
            if bracket in seen:
                seen.remove(bracket)
                logging.info(f"{bracket} already seen, removed")
        if item not in brackets_seen and item not in seen:
            seen.append(item)
            logging.info(f"{item} not yet seen, added")
        else:
            logging.info(f"{item} already seen, ignored")
    return seen


def main():
    """Remove duplicates from Simplenotes."""
    s_note = artist_db.get_simplenote()
    artist_notes = artist_db.get_artist_notes(s_note)
    original_notes = copy.deepcopy(artist_notes)
    logging.debug(f"artist_notes = {repr(artist_notes)}")
    SEPARATOR = "\n* "
    for i in artist_notes:
        title, *artists = artist_notes[i]["content"].split(SEPARATOR)
        artists = [artist.lower.strip() for artist in artists]
        logging.debug(f"title = {repr(title)}")
        logging.debug(f"proper artists = {repr(artists)}")
        artists = SEPARATOR.join(sort_uniq(artists))
        artist_notes[i]["content"] = f"{title}\n{artists}"
        logging.debug(f"artist_notes[{i}] = {repr(artist_notes[i])}")
    artist_db.update_simplenote(s_note, artist_notes, original_notes)


if __name__ == "__main__":
    main()
